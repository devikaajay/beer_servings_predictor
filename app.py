{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMnXEiBMw7lgUJbZt7vIaC6",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/devikaajay/beer_servings_predictor/blob/master/app.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install pandas scikit-learn joblib matplotlib seaborn streamlit\n",
        "!wget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64\n",
        "!chmod +x cloudflared-linux-amd64\n",
        "!mv cloudflared-linux-amd64 /usr/local/bin/cloudflared\n",
        "\n",
        "print(\"Libraries and Cloudflare Tunnel installed!\")"
      ],
      "metadata": {
        "id": "RDpYuNsqcO5m"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile model_training.py\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split, GridSearchCV\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import r2_score\n",
        "import joblib\n",
        "import numpy as np\n",
        "\n",
        "print(\"Starting model training script...\")\n",
        "\n",
        "try:\n",
        "    df = pd.read_csv('beer-servings.csv')\n",
        "    print(\"Dataset loaded successfully.\")\n",
        "except FileNotFoundError:\n",
        "    print(\"Error: 'beer-servings.csv' not found. Please ensure it's in the same directory.\")\n",
        "    exit()\n",
        "\n",
        "print(\"Starting data preprocessing...\")\n",
        "\n",
        "if df.columns[0] == 'Unnamed: 0':\n",
        "    df = df.drop(columns=[df.columns[0]])\n",
        "\n",
        "numerical_cols = ['beer_servings', 'spirit_servings', 'wine_servings', 'total_litres_of_pure_alcohol']\n",
        "for col in numerical_cols:\n",
        "    if df[col].isnull().any():\n",
        "        median_val = df[col].median()\n",
        "        df[col] = df[col].fillna(median_val)\n",
        "        print(f\"Filled missing values in '{col}' with median: {median_val}\")\n",
        "\n",
        "categorical_cols = ['country', 'continent']\n",
        "for col in categorical_cols:\n",
        "    if df[col].isnull().any():\n",
        "        df[col] = df[col].fillna('Unknown')\n",
        "        print(f\"Filled missing values in '{col}' with 'Unknown'.\")\n",
        "\n",
        "df_encoded = pd.get_dummies(df, columns=['country', 'continent'], drop_first=True)\n",
        "print(\"Categorical features one-hot encoded.\")\n",
        "\n",
        "X = df_encoded.drop('total_litres_of_pure_alcohol', axis=1)\n",
        "y = df_encoded['total_litres_of_pure_alcohol']\n",
        "\n",
        "feature_columns = X.columns.tolist()\n",
        "print(f\"Features for training: {feature_columns}\")\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "print(f\"Data split into training ({len(X_train)} samples) and testing ({len(X_test)} samples).\")\n",
        "\n",
        "models = {\n",
        "    'Linear Regression': LinearRegression(),\n",
        "    'Random Forest Regressor': RandomForestRegressor(random_state=42)\n",
        "}\n",
        "\n",
        "best_model = None\n",
        "best_r2_score = -np.inf\n",
        "best_model_name = \"\"\n",
        "\n",
        "for name, model in models.items():\n",
        "    print(f\"\\n--- Training {name} ---\")\n",
        "    if name == 'Random Forest Regressor':\n",
        "        param_grid = {\n",
        "            'n_estimators': [50, 100, 200],\n",
        "            'max_features': ['sqrt', 'log2'],\n",
        "            'max_depth': [5, 10, None]\n",
        "        }\n",
        "        grid_search = GridSearchCV(model, param_grid, cv=3, scoring='r2', n_jobs=-1, verbose=1)\n",
        "        grid_search.fit(X_train, y_train)\n",
        "        model = grid_search.best_estimator_\n",
        "        print(f\"Best parameters for {name}: {grid_search.best_params_}\")\n",
        "    else:\n",
        "        model.fit(X_train, y_train)\n",
        "\n",
        "    y_pred = model.predict(X_test)\n",
        "    r2 = r2_score(y_test, y_pred)\n",
        "    print(f\"R2-score for {name} on evaluation data: {r2:.4f}\")\n",
        "\n",
        "    if r2 > best_r2_score:\n",
        "        best_r2_score = r2\n",
        "        best_model = model\n",
        "        best_model_name = name\n",
        "\n",
        "print(f\"\\nBest model selected for deployment: {best_model_name} with R2-score: {best_r2_score:.4f}\")\n",
        "\n",
        "model_filename = 'best_beer_predictor_model.joblib'\n",
        "joblib.dump(best_model, model_filename)\n",
        "print(f\"Best model saved as '{model_filename}'\")\n",
        "\n",
        "feature_columns_filename = 'feature_columns.joblib'\n",
        "joblib.dump(feature_columns, feature_columns_filename)\n",
        "print(f\"Feature columns saved as '{feature_columns_filename}'\")\n",
        "\n",
        "print(\"Model training script finished successfully.\")"
      ],
      "metadata": {
        "id": "pmUPEwAwcYNI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!python model_training.py"
      ],
      "metadata": {
        "id": "Y0gPkmYqckST"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile app.py\n",
        "import streamlit as st\n",
        "import pandas as pd\n",
        "import joblib\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import io\n",
        "import os # Import os module to check for file existence\n",
        "\n",
        "st.set_page_config(\n",
        "    page_title=\"Beer Servings Predictor\",\n",
        "    layout=\"centered\",\n",
        "    initial_sidebar_state=\"auto\"\n",
        ")\n",
        "\n",
        "st.title(\"üç∫ Beer Servings Alcohol Predictor\")\n",
        "st.markdown(\"A web application to predict the total litres of pure alcohol based on serving data and geographical information.\")\n",
        "\n",
        "# Add a simple message to confirm the app itself is loading\n",
        "st.write(\"App initialized. Attempting to load data and model...\")\n",
        "\n",
        "\n",
        "# --- Load the trained model and feature columns ---\n",
        "try:\n",
        "    if os.path.exists('best_beer_predictor_model.joblib'):\n",
        "        model = joblib.load('best_beer_predictor_model.joblib')\n",
        "        st.sidebar.success(\"Model loaded successfully!\")\n",
        "    else:\n",
        "        st.sidebar.error(\"Error: 'best_beer_predictor_model.joblib' not found!\")\n",
        "        st.stop() # Stop the app if model is missing\n",
        "\n",
        "    if os.path.exists('feature_columns.joblib'):\n",
        "        feature_columns = joblib.load('feature_columns.joblib')\n",
        "        st.sidebar.success(\"Feature columns loaded successfully!\")\n",
        "    else:\n",
        "        st.sidebar.error(\"Error: 'feature_columns.joblib' not found!\")\n",
        "        st.stop() # Stop the app if feature columns are missing\n",
        "\n",
        "except Exception as e:\n",
        "    st.error(f\"Error loading model or feature columns: {e}. Please ensure 'model_training.py' was run successfully and files are in the repository root.\")\n",
        "    st.exception(e) # Display full exception for debugging\n",
        "    st.stop()\n",
        "\n",
        "\n",
        "# --- Load the original dataset for infographics and dropdown options ---\n",
        "@st.cache_data\n",
        "def load_data():\n",
        "    file_path = 'beer-servings.csv'\n",
        "    if not os.path.exists(file_path):\n",
        "        st.error(f\"Error: Dataset '{file_path}' not found in the repository root!\")\n",
        "        return pd.DataFrame() # Return empty DataFrame if file not found\n",
        "\n",
        "    try:\n",
        "        df = pd.read_csv(file_path)\n",
        "        st.sidebar.success(f\"Dataset '{file_path}' loaded successfully.\")\n",
        "\n",
        "        if df.columns[0] == 'Unnamed: 0':\n",
        "            df = df.drop(columns=[df.columns[0]])\n",
        "\n",
        "        # Preprocess data consistent with model training script (impute NaNs)\n",
        "        numerical_cols = ['beer_servings', 'spirit_servings', 'wine_servings', 'total_litres_of_pure_alcohol']\n",
        "        for col in numerical_cols:\n",
        "            if df[col].isnull().any():\n",
        "                median_val = df[col].median()\n",
        "                df[col] = df[col].fillna(median_val)\n",
        "\n",
        "        categorical_cols = ['country', 'continent']\n",
        "        for col in categorical_cols:\n",
        "            if df[col].isnull().any():\n",
        "                df[col] = df[col].fillna('Unknown')\n",
        "        return df\n",
        "    except Exception as e:\n",
        "        st.error(f\"Error loading or preprocessing dataset: {e}\")\n",
        "        st.exception(e)\n",
        "        return pd.DataFrame()\n",
        "\n",
        "df = load_data()\n",
        "\n",
        "# Check if data loaded successfully before proceeding with UI elements\n",
        "if df.empty:\n",
        "    st.warning(\"Cannot proceed: Data for infographics and prediction inputs is not available.\")\n",
        "    st.stop() # Stop further execution if data is missing\n",
        "\n",
        "unique_countries = sorted([c for c in df['country'].unique().tolist() if c != 'Unknown'])\n",
        "unique_continents = sorted([c for c in df['continent'].unique().tolist() if c != 'Unknown'])\n",
        "\n",
        "\n",
        "# --- Infographics Section ---\n",
        "st.header(\"üìä Data Infographics\")\n",
        "\n",
        "# Only display charts if data is loaded\n",
        "if not df.empty:\n",
        "    st.subheader(\"Total Litres of Pure Alcohol by Continent\")\n",
        "    continent_alcohol = df.groupby('continent')['total_litres_of_pure_alcohol'].sum().reset_index()\n",
        "    fig, ax = plt.subplots(figsize=(10, 6))\n",
        "    sns.barplot(x='continent', y='total_litres_of_pure_alcohol', data=continent_alcohol, ax=ax, palette='viridis')\n",
        "    ax.set_title('Total Litres of Pure Alcohol by Continent', fontsize=16)\n",
        "    ax.set_xlabel('Continent', fontsize=12)\n",
        "    ax.set_ylabel('Total Litres of Pure Alcohol (L)', fontsize=12)\n",
        "    plt.xticks(rotation=45, ha='right')\n",
        "    plt.tight_layout()\n",
        "    st.pyplot(fig)\n",
        "    st.markdown(\"This bar chart displays the aggregated total litres of pure alcohol consumed across different continents. It highlights regions with higher overall consumption.\")\n",
        "\n",
        "    st.subheader(\"Beer Servings vs. Total Litres of Pure Alcohol (by Country)\")\n",
        "    fig2, ax2 = plt.subplots(figsize=(10, 6))\n",
        "    sns.scatterplot(x='beer_servings', y='total_litres_of_pure_alcohol', data=df, ax=ax2, hue='continent', palette='deep', s=100, alpha=0.7)\n",
        "    ax2.set_title('Beer Servings vs. Total Litres of Pure Alcohol', fontsize=16)\n",
        "    ax2.set_xlabel('Beer Servings (ml)', fontsize=12)\n",
        "    ax2.set_ylabel('Total Litres of Pure Alcohol (L)', fontsize=12)\n",
        "    plt.tight_layout()\n",
        "    st.pyplot(fig2)\n",
        "    st.markdown(\"This scatter plot illustrates the relationship between beer servings and total pure alcohol consumption per country, with points colored by continent. It helps visualize potential correlations and clusters.\")\n",
        "else:\n",
        "    st.warning(\"Data not available to display infographics.\")\n",
        "\n",
        "\n",
        "# --- Prediction Section ---\n",
        "st.header(\"üîÆ Make a Prediction\")\n",
        "st.markdown(\"Enter the serving details and select the country/continent to get a prediction for the total litres of pure alcohol.\")\n",
        "\n",
        "col1, col2, col3 = st.columns(3)\n",
        "with col1:\n",
        "    beer_servings = st.number_input(\"Beer Servings (ml)\", min_value=0, value=100, step=10, help=\"Enter the amount of beer servings in milliliters.\")\n",
        "with col2:\n",
        "    spirit_servings = st.number_input(\"Spirit Servings (ml)\", min_value=0, value=50, step=5, help=\"Enter the amount of spirit servings in milliliters.\")\n",
        "with col3:\n",
        "    wine_servings = st.number_input(\"Wine Servings (ml)\", min_value=0, value=20, step=5, help=\"Enter the amount of wine servings in milliliters.\")\n",
        "\n",
        "selected_country = st.selectbox(\"Country\", options=unique_countries, help=\"Select the country for which to make a prediction.\")\n",
        "selected_continent = st.selectbox(\"Continent\", options=unique_continents, help=\"Select the continent for which to make a prediction.\")\n",
        "\n",
        "if st.button(\"Predict Total Litres of Pure Alcohol\"):\n",
        "    try:\n",
        "        input_data = {\n",
        "            'beer_servings': beer_servings,\n",
        "            'spirit_servings': spirit_servings,\n",
        "            'wine_servings': wine_servings\n",
        "        }\n",
        "\n",
        "        for col in feature_columns:\n",
        "            if col.startswith('country_') or col.startswith('continent_'):\n",
        "                input_data[col] = 0\n",
        "\n",
        "        country_col_name = f'country_{selected_country}'\n",
        "        if country_col_name in feature_columns:\n",
        "            input_data[country_col_name] = 1\n",
        "        else:\n",
        "            st.warning(f\"Warning: Country '{selected_country}' was not a distinct category in the training data. Its specific effect might not be captured.\")\n",
        "\n",
        "        continent_col_name = f'continent_{selected_continent}'\n",
        "        if continent_col_name in feature_columns:\n",
        "            input_data[continent_col_name] = 1\n",
        "        else:\n",
        "            st.warning(f\"Warning: Continent '{selected_continent}' was not a distinct category in the training data. Its specific effect might not be captured.\")\n",
        "\n",
        "        input_df = pd.DataFrame([input_data])\n",
        "        input_df = input_df.reindex(columns=feature_columns, fill_value=0)\n",
        "\n",
        "        prediction = model.predict(input_df)[0]\n",
        "        st.success(f\"**Predicted Total Litres of Pure Alcohol:** {prediction:.2f} L\")\n",
        "\n",
        "    except Exception as e:\n",
        "        st.error(f\"An error occurred during prediction: {e}\")\n",
        "        st.exception(e)\n",
        "\n",
        "st.markdown(\"---\")\n",
        "st.markdown(\"Developed as a Web App Development and Deployment Case Study.\")\n",
        "st.markdown(\"Powered by Streamlit, Scikit-learn, Matplotlib, and Seaborn.\")"
      ],
      "metadata": {
        "id": "L9JUQNVmcodJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import subprocess\n",
        "import threading\n",
        "import time\n",
        "import requests\n",
        "\n",
        "streamlit_port = 8501\n",
        "\n",
        "def run_streamlit_process():\n",
        "    cmd = f\"nohup streamlit run app.py --server.port {streamlit_port} --server.enableCORS false --server.enableXsrfProtection false > streamlit_app.log 2>&1 &\"\n",
        "    subprocess.run(cmd, shell=True)\n",
        "\n",
        "def wait_for_streamlit_ready(port, timeout=60):\n",
        "    start_time = time.time()\n",
        "    print(f\"Waiting for Streamlit server to become ready on port {port}...\")\n",
        "    while True:\n",
        "        try:\n",
        "            response = requests.get(f\"http://localhost:{port}/_stcore/health\")\n",
        "            if response.status_code == 200:\n",
        "                print(f\"Streamlit server is ready on port {port}.\")\n",
        "                return True\n",
        "        except requests.exceptions.ConnectionError:\n",
        "            pass\n",
        "        if time.time() - start_time > timeout:\n",
        "            print(f\"Streamlit server did not become ready within {timeout} seconds.\")\n",
        "            return False\n",
        "        time.sleep(1)\n",
        "print(\"Starting Streamlit app in background...\")\n",
        "thread = threading.Thread(target=run_streamlit_process)\n",
        "thread.daemon = True\n",
        "thread.start()\n",
        "print(f\"Streamlit app process initiated on port {streamlit_port}\")\n",
        "\n",
        "if not wait_for_streamlit_ready(streamlit_port):\n",
        "    print(\"Streamlit app did not start. Aborting Cloudflare Tunnel setup.\")\n",
        "else:\n",
        "\n",
        "    time.sleep(5)\n",
        "    print(\"Opening Cloudflare Tunnel...\")\n",
        "    try:\n",
        "        cf_process = subprocess.Popen(\n",
        "            f\"/usr/local/bin/cloudflared tunnel --url http://localhost:{streamlit_port}\",\n",
        "            shell=True,\n",
        "            stdout=subprocess.PIPE,\n",
        "            stderr=subprocess.PIPE,\n",
        "            text=True,\n",
        "            bufsize=1\n",
        "        )\n",
        "\n",
        "        public_url = None\n",
        "        start_tunnel_wait_time = time.time()\n",
        "\n",
        "        print(\"\\n--- Cloudflare Tunnel Output (Live) ---\")\n",
        "        while True:\n",
        "\n",
        "            stderr_line = cf_process.stderr.readline()\n",
        "            if stderr_line:\n",
        "                print(f\"[Cloudflared STDERR]: {stderr_line.strip()}\")\n",
        "                if \"https://\" in stderr_line and (\"your random tunnel\" in stderr_line or \"tunnel ID\" in stderr_line):\n",
        "\n",
        "                    try:\n",
        "                        url_match = stderr_line.split(\"https://\")[1]\n",
        "                        public_url = \"https://\" + url_match.split(\" \")[0].strip()\n",
        "                        if not public_url.endswith(\"/\"):\n",
        "                            public_url += \"/\"\n",
        "                        print(f\"\\n--- Found Public URL: {public_url} ---\")\n",
        "                        break\n",
        "                    except IndexError:\n",
        "                        pass\n",
        "\n",
        "\n",
        "            stdout_line = cf_process.stdout.readline()\n",
        "            if stdout_line:\n",
        "                print(f\"[Cloudflared STDOUT]: {stdout_line.strip()}\")\n",
        "\n",
        "            if cf_process.poll() is not None:\n",
        "                if public_url:\n",
        "                    break\n",
        "                else:\n",
        "                    print(\"Cloudflare Tunnel process terminated without providing a URL.\")\n",
        "                    break\n",
        "            if time.time() - start_tunnel_wait_time > 120:\n",
        "                print(\"Cloudflare Tunnel timed out while waiting for URL. It might still be running or failed silently.\")\n",
        "                break\n",
        "\n",
        "            time.sleep(0.5)\n",
        "        if cf_process.poll() is None:\n",
        "            print(\"Terminating Cloudflare Tunnel process...\")\n",
        "            cf_process.terminate()\n",
        "            time.sleep(1)\n",
        "            if cf_process.poll() is None:\n",
        "                cf_process.kill()\n",
        "            print(\"Cloudflare Tunnel process terminated.\")\n",
        "\n",
        "\n",
        "        if public_url:\n",
        "            print(f\"\\nYour Streamlit app is publicly accessible at: {public_url}\")\n",
        "            print(\"\\nClick the link above to open your app!\")\n",
        "            print(\"This URL should NOT require a password and can be shared.\")\n",
        "            print(\"If the app doesn't load immediately, please wait a few seconds and refresh the page.\")\n",
        "        else:\n",
        "            print(\"\\nFailed to get Cloudflare Tunnel URL after extensive monitoring.\")\n",
        "            print(\"This usually means cloudflared encountered an issue or its output format changed significantly.\")\n",
        "            print(\"Check the full [Cloudflared STDERR] and [Cloudflared STDOUT] above for clues.\")\n",
        "\n",
        "    except Exception as e:\n",
        "        print(f\"\\nAn unexpected Python error occurred while setting up Cloudflare Tunnel: {e}\")\n",
        "        import traceback\n",
        "        traceback.print_exc()\n",
        "        print(\"Please ensure `cloudflared` executable is in /usr/local/bin/ and has execute permissions.\")\n",
        "        print(\"You can try reinstalling: `!wget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64` and `!chmod +x cloudflared-linux-amd64` and `!mv cloudflared-linux-amd64 /usr/local/bin/cloudflared`\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qmUK0K6XcyDZ",
        "outputId": "9751d699-91c9-4ffc-df7b-20882b827464"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Starting Streamlit app in background...\n",
            "Streamlit app process initiated on port 8501\n",
            "Waiting for Streamlit server to become ready on port 8501...\n",
            "Streamlit server is ready on port 8501.\n",
            "Opening Cloudflare Tunnel...\n",
            "\n",
            "--- Cloudflare Tunnel Output (Live) ---\n",
            "[Cloudflared STDERR]: 2025-06-24T15:16:36Z INF Thank you for trying Cloudflare Tunnel. Doing so, without a Cloudflare account, is a quick way to experiment and try it out. However, be aware that these account-less Tunnels have no uptime guarantee, are subject to the Cloudflare Online Services Terms of Use (https://www.cloudflare.com/website-terms/), and Cloudflare reserves the right to investigate your use of Tunnels for violations of such terms. If you intend to use Tunnels in production you should use a pre-created named tunnel by following: https://developers.cloudflare.com/cloudflare-one/connections/connect-apps\n"
          ]
        }
      ]
    }
  ]
}