{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPaqkckmO5a1zoUIto9AwmM",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/devikaajay/beer_servings_predictor/blob/master/app.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install pandas scikit-learn joblib matplotlib seaborn streamlit\n",
        "!wget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64\n",
        "!chmod +x cloudflared-linux-amd64\n",
        "!mv cloudflared-linux-amd64 /usr/local/bin/cloudflared\n",
        "\n",
        "print(\"Libraries and Cloudflare Tunnel installed!\")"
      ],
      "metadata": {
        "id": "RDpYuNsqcO5m",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e889a184-b7e3-4736-8c66-b54ae7c7c3c8"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (1.6.1)\n",
            "Requirement already satisfied: joblib in /usr/local/lib/python3.11/dist-packages (1.5.1)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.10.0)\n",
            "Requirement already satisfied: seaborn in /usr/local/lib/python3.11/dist-packages (0.13.2)\n",
            "Requirement already satisfied: streamlit in /usr/local/lib/python3.11/dist-packages (1.46.0)\n",
            "Requirement already satisfied: numpy>=1.23.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.0.2)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.15.3)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (3.6.0)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.2)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.58.4)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (24.2)\n",
            "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (11.2.1)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.2.3)\n",
            "Requirement already satisfied: altair<6,>=4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.5.0)\n",
            "Requirement already satisfied: blinker<2,>=1.5.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (1.9.0)\n",
            "Requirement already satisfied: cachetools<7,>=4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.5.2)\n",
            "Requirement already satisfied: click<9,>=7.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (8.2.1)\n",
            "Requirement already satisfied: protobuf<7,>=3.20 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.29.5)\n",
            "Requirement already satisfied: pyarrow>=7.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (18.1.0)\n",
            "Requirement already satisfied: requests<3,>=2.27 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.32.3)\n",
            "Requirement already satisfied: tenacity<10,>=8.1.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (9.1.2)\n",
            "Requirement already satisfied: toml<2,>=0.10.1 in /usr/local/lib/python3.11/dist-packages (from streamlit) (0.10.2)\n",
            "Requirement already satisfied: typing-extensions<5,>=4.4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (4.14.0)\n",
            "Requirement already satisfied: watchdog<7,>=2.1.5 in /usr/local/lib/python3.11/dist-packages (from streamlit) (6.0.0)\n",
            "Requirement already satisfied: gitpython!=3.1.19,<4,>=3.0.7 in /usr/local/lib/python3.11/dist-packages (from streamlit) (3.1.44)\n",
            "Requirement already satisfied: pydeck<1,>=0.8.0b4 in /usr/local/lib/python3.11/dist-packages (from streamlit) (0.9.1)\n",
            "Requirement already satisfied: tornado!=6.5.0,<7,>=6.0.3 in /usr/local/lib/python3.11/dist-packages (from streamlit) (6.4.2)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (3.1.6)\n",
            "Requirement already satisfied: jsonschema>=3.0 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (4.24.0)\n",
            "Requirement already satisfied: narwhals>=1.14.2 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (1.43.0)\n",
            "Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.11/dist-packages (from gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.12)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (3.4.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (2.4.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (2025.6.15)\n",
            "Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.11/dist-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit) (5.0.2)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->altair<6,>=4.0->streamlit) (3.0.2)\n",
            "Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (25.3.0)\n",
            "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (2025.4.1)\n",
            "Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.36.2)\n",
            "Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.25.1)\n",
            "--2025-06-24 15:15:58--  https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64\n",
            "Resolving github.com (github.com)... 140.82.114.4\n",
            "Connecting to github.com (github.com)|140.82.114.4|:443... connected.\n",
            "HTTP request sent, awaiting response... 302 Found\n",
            "Location: https://github.com/cloudflare/cloudflared/releases/download/2025.6.1/cloudflared-linux-amd64 [following]\n",
            "--2025-06-24 15:15:59--  https://github.com/cloudflare/cloudflared/releases/download/2025.6.1/cloudflared-linux-amd64\n",
            "Reusing existing connection to github.com:443.\n",
            "HTTP request sent, awaiting response... 302 Found\n",
            "Location: https://objects.githubusercontent.com/github-production-release-asset-2e65be/106867604/015db4d3-519c-4e00-a1a6-289640709684?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=releaseassetproduction%2F20250624%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20250624T151559Z&X-Amz-Expires=1800&X-Amz-Signature=77203ce5fedf4b75e16dea8cbcab6eaf027511ccd4645d7717cf8de964c8f17c&X-Amz-SignedHeaders=host&response-content-disposition=attachment%3B%20filename%3Dcloudflared-linux-amd64&response-content-type=application%2Foctet-stream [following]\n",
            "--2025-06-24 15:15:59--  https://objects.githubusercontent.com/github-production-release-asset-2e65be/106867604/015db4d3-519c-4e00-a1a6-289640709684?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=releaseassetproduction%2F20250624%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20250624T151559Z&X-Amz-Expires=1800&X-Amz-Signature=77203ce5fedf4b75e16dea8cbcab6eaf027511ccd4645d7717cf8de964c8f17c&X-Amz-SignedHeaders=host&response-content-disposition=attachment%3B%20filename%3Dcloudflared-linux-amd64&response-content-type=application%2Foctet-stream\n",
            "Resolving objects.githubusercontent.com (objects.githubusercontent.com)... 185.199.108.133, 185.199.109.133, 185.199.110.133, ...\n",
            "Connecting to objects.githubusercontent.com (objects.githubusercontent.com)|185.199.108.133|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 41164185 (39M) [application/octet-stream]\n",
            "Saving to: ‘cloudflared-linux-amd64’\n",
            "\n",
            "cloudflared-linux-a 100%[===================>]  39.26M  94.3MB/s    in 0.4s    \n",
            "\n",
            "2025-06-24 15:15:59 (94.3 MB/s) - ‘cloudflared-linux-amd64’ saved [41164185/41164185]\n",
            "\n",
            "Libraries and Cloudflare Tunnel installed!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile model_training.py\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split, GridSearchCV\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import r2_score\n",
        "import joblib\n",
        "import numpy as np\n",
        "\n",
        "print(\"Starting model training script...\")\n",
        "\n",
        "try:\n",
        "    df = pd.read_csv('beer-servings.csv')\n",
        "    print(\"Dataset loaded successfully.\")\n",
        "except FileNotFoundError:\n",
        "    print(\"Error: 'beer-servings.csv' not found. Please ensure it's in the same directory.\")\n",
        "    exit()\n",
        "\n",
        "print(\"Starting data preprocessing...\")\n",
        "\n",
        "if df.columns[0] == 'Unnamed: 0':\n",
        "    df = df.drop(columns=[df.columns[0]])\n",
        "\n",
        "numerical_cols = ['beer_servings', 'spirit_servings', 'wine_servings', 'total_litres_of_pure_alcohol']\n",
        "for col in numerical_cols:\n",
        "    if df[col].isnull().any():\n",
        "        median_val = df[col].median()\n",
        "        df[col] = df[col].fillna(median_val)\n",
        "        print(f\"Filled missing values in '{col}' with median: {median_val}\")\n",
        "\n",
        "categorical_cols = ['country', 'continent']\n",
        "for col in categorical_cols:\n",
        "    if df[col].isnull().any():\n",
        "        df[col] = df[col].fillna('Unknown')\n",
        "        print(f\"Filled missing values in '{col}' with 'Unknown'.\")\n",
        "\n",
        "df_encoded = pd.get_dummies(df, columns=['country', 'continent'], drop_first=True)\n",
        "print(\"Categorical features one-hot encoded.\")\n",
        "\n",
        "X = df_encoded.drop('total_litres_of_pure_alcohol', axis=1)\n",
        "y = df_encoded['total_litres_of_pure_alcohol']\n",
        "\n",
        "feature_columns = X.columns.tolist()\n",
        "print(f\"Features for training: {feature_columns}\")\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "print(f\"Data split into training ({len(X_train)} samples) and testing ({len(X_test)} samples).\")\n",
        "\n",
        "models = {\n",
        "    'Linear Regression': LinearRegression(),\n",
        "    'Random Forest Regressor': RandomForestRegressor(random_state=42)\n",
        "}\n",
        "\n",
        "best_model = None\n",
        "best_r2_score = -np.inf\n",
        "best_model_name = \"\"\n",
        "\n",
        "for name, model in models.items():\n",
        "    print(f\"\\n--- Training {name} ---\")\n",
        "    if name == 'Random Forest Regressor':\n",
        "        param_grid = {\n",
        "            'n_estimators': [50, 100, 200],\n",
        "            'max_features': ['sqrt', 'log2'],\n",
        "            'max_depth': [5, 10, None]\n",
        "        }\n",
        "        grid_search = GridSearchCV(model, param_grid, cv=3, scoring='r2', n_jobs=-1, verbose=1)\n",
        "        grid_search.fit(X_train, y_train)\n",
        "        model = grid_search.best_estimator_\n",
        "        print(f\"Best parameters for {name}: {grid_search.best_params_}\")\n",
        "    else:\n",
        "        model.fit(X_train, y_train)\n",
        "\n",
        "    y_pred = model.predict(X_test)\n",
        "    r2 = r2_score(y_test, y_pred)\n",
        "    print(f\"R2-score for {name} on evaluation data: {r2:.4f}\")\n",
        "\n",
        "    if r2 > best_r2_score:\n",
        "        best_r2_score = r2\n",
        "        best_model = model\n",
        "        best_model_name = name\n",
        "\n",
        "print(f\"\\nBest model selected for deployment: {best_model_name} with R2-score: {best_r2_score:.4f}\")\n",
        "\n",
        "model_filename = 'best_beer_predictor_model.joblib'\n",
        "joblib.dump(best_model, model_filename)\n",
        "print(f\"Best model saved as '{model_filename}'\")\n",
        "\n",
        "feature_columns_filename = 'feature_columns.joblib'\n",
        "joblib.dump(feature_columns, feature_columns_filename)\n",
        "print(f\"Feature columns saved as '{feature_columns_filename}'\")\n",
        "\n",
        "print(\"Model training script finished successfully.\")"
      ],
      "metadata": {
        "id": "pmUPEwAwcYNI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "65879abb-1145-4fa8-9bf1-9e6390dcc7fc"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Overwriting model_training.py\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!python model_training.py"
      ],
      "metadata": {
        "id": "Y0gPkmYqckST",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "05c84d11-964f-4bb4-dad9-aa178c78a742"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Starting model training script...\n",
            "Dataset loaded successfully.\n",
            "Starting data preprocessing...\n",
            "Filled missing values in 'beer_servings' with median: 76.0\n",
            "Filled missing values in 'spirit_servings' with median: 60.0\n",
            "Filled missing values in 'wine_servings' with median: 9.0\n",
            "Filled missing values in 'total_litres_of_pure_alcohol' with median: 4.25\n",
            "Categorical features one-hot encoded.\n",
            "Features for training: ['beer_servings', 'spirit_servings', 'wine_servings', 'country_Albania', 'country_Algeria', 'country_Andorra', 'country_Angola', 'country_Antigua & Barbuda', 'country_Argentina', 'country_Armenia', 'country_Australia', 'country_Austria', 'country_Azerbaijan', 'country_Bahamas', 'country_Bahrain', 'country_Bangladesh', 'country_Barbados', 'country_Belarus', 'country_Belgium', 'country_Belize', 'country_Benin', 'country_Bhutan', 'country_Bolivia', 'country_Bosnia-Herzegovina', 'country_Botswana', 'country_Brazil', 'country_Brunei', 'country_Bulgaria', 'country_Burkina Faso', 'country_Burundi', 'country_Cabo Verde', 'country_Cambodia', 'country_Cameroon', 'country_Canada', 'country_Central African Republic', 'country_Chad', 'country_Chile', 'country_China', 'country_Colombia', 'country_Comoros', 'country_Congo', 'country_Cook Islands', 'country_Costa Rica', \"country_Cote d'Ivoire\", 'country_Croatia', 'country_Cuba', 'country_Cyprus', 'country_Czech Republic', 'country_DR Congo', 'country_Denmark', 'country_Djibouti', 'country_Dominica', 'country_Dominican Republic', 'country_Ecuador', 'country_Egypt', 'country_El Salvador', 'country_Equatorial Guinea', 'country_Eritrea', 'country_Estonia', 'country_Ethiopia', 'country_Fiji', 'country_Finland', 'country_France', 'country_Gabon', 'country_Gambia', 'country_Georgia', 'country_Germany', 'country_Ghana', 'country_Greece', 'country_Grenada', 'country_Guatemala', 'country_Guinea', 'country_Guinea-Bissau', 'country_Guyana', 'country_Haiti', 'country_Honduras', 'country_Hungary', 'country_Iceland', 'country_India', 'country_Indonesia', 'country_Iran', 'country_Iraq', 'country_Ireland', 'country_Israel', 'country_Italy', 'country_Jamaica', 'country_Japan', 'country_Jordan', 'country_Kazakhstan', 'country_Kenya', 'country_Kiribati', 'country_Kuwait', 'country_Kyrgyzstan', 'country_Laos', 'country_Latvia', 'country_Lebanon', 'country_Lesotho', 'country_Liberia', 'country_Libya', 'country_Lithuania', 'country_Luxembourg', 'country_Macedonia', 'country_Madagascar', 'country_Malawi', 'country_Malaysia', 'country_Maldives', 'country_Mali', 'country_Malta', 'country_Marshall Islands', 'country_Mauritania', 'country_Mauritius', 'country_Mexico', 'country_Micronesia', 'country_Moldova', 'country_Monaco', 'country_Mongolia', 'country_Montenegro', 'country_Morocco', 'country_Mozambique', 'country_Myanmar', 'country_Namibia', 'country_Nauru', 'country_Nepal', 'country_Netherlands', 'country_New Zealand', 'country_Nicaragua', 'country_Niger', 'country_Nigeria', 'country_Niue', 'country_North Korea', 'country_Norway', 'country_Oman', 'country_Pakistan', 'country_Palau', 'country_Panama', 'country_Papua New Guinea', 'country_Paraguay', 'country_Peru', 'country_Philippines', 'country_Poland', 'country_Portugal', 'country_Qatar', 'country_Romania', 'country_Russian Federation', 'country_Rwanda', 'country_Samoa', 'country_San Marino', 'country_Sao Tome & Principe', 'country_Saudi Arabia', 'country_Senegal', 'country_Serbia', 'country_Seychelles', 'country_Sierra Leone', 'country_Singapore', 'country_Slovakia', 'country_Slovenia', 'country_Solomon Islands', 'country_Somalia', 'country_South Africa', 'country_South Korea', 'country_Spain', 'country_Sri Lanka', 'country_St. Kitts & Nevis', 'country_St. Lucia', 'country_St. Vincent & the Grenadines', 'country_Sudan', 'country_Suriname', 'country_Swaziland', 'country_Sweden', 'country_Switzerland', 'country_Syria', 'country_Tajikistan', 'country_Tanzania', 'country_Thailand', 'country_Timor-Leste', 'country_Togo', 'country_Tonga', 'country_Trinidad & Tobago', 'country_Tunisia', 'country_Turkey', 'country_Turkmenistan', 'country_Tuvalu', 'country_USA', 'country_Uganda', 'country_Ukraine', 'country_United Arab Emirates', 'country_United Kingdom', 'country_Uruguay', 'country_Uzbekistan', 'country_Vanuatu', 'country_Venezuela', 'country_Vietnam', 'country_Yemen', 'country_Zambia', 'country_Zimbabwe', 'continent_Asia', 'continent_Europe', 'continent_North America', 'continent_Oceania', 'continent_South America']\n",
            "Data split into training (154 samples) and testing (39 samples).\n",
            "\n",
            "--- Training Linear Regression ---\n",
            "R2-score for Linear Regression on evaluation data: 0.9277\n",
            "\n",
            "--- Training Random Forest Regressor ---\n",
            "Fitting 3 folds for each of 18 candidates, totalling 54 fits\n",
            "Best parameters for Random Forest Regressor: {'max_depth': None, 'max_features': 'sqrt', 'n_estimators': 100}\n",
            "R2-score for Random Forest Regressor on evaluation data: 0.8161\n",
            "\n",
            "Best model selected for deployment: Linear Regression with R2-score: 0.9277\n",
            "Best model saved as 'best_beer_predictor_model.joblib'\n",
            "Feature columns saved as 'feature_columns.joblib'\n",
            "Model training script finished successfully.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile app.py\n",
        "import streamlit as st\n",
        "import pandas as pd\n",
        "import joblib\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import io\n",
        "\n",
        "try:\n",
        "    model = joblib.load('best_beer_predictor_model.joblib')\n",
        "    feature_columns = joblib.load('feature_columns.joblib')\n",
        "    st.sidebar.success(\"Model and feature columns loaded successfully!\")\n",
        "except FileNotFoundError:\n",
        "    st.error(\"Error: Model files not found. Please ensure 'model_training.py' was run successfully.\")\n",
        "    st.stop()\n",
        "except Exception as e:\n",
        "    st.error(f\"Error loading model or feature columns: {e}\")\n",
        "    st.stop()\n",
        "\n",
        "@st.cache_data\n",
        "def load_data():\n",
        "    try:\n",
        "        df = pd.read_csv('beer-servings.csv')\n",
        "        if df.columns[0] == 'Unnamed: 0':\n",
        "            df = df.drop(columns=[df.columns[0]])\n",
        "\n",
        "        numerical_cols = ['beer_servings', 'spirit_servings', 'wine_servings', 'total_litres_of_pure_alcohol']\n",
        "        for col in numerical_cols:\n",
        "            if df[col].isnull().any():\n",
        "                median_val = df[col].median()\n",
        "                df[col] = df[col].fillna(median_val)\n",
        "\n",
        "        categorical_cols = ['country', 'continent']\n",
        "        for col in categorical_cols:\n",
        "            if df[col].isnull().any():\n",
        "                df[col] = df[col].fillna('Unknown')\n",
        "        return df\n",
        "    except FileNotFoundError:\n",
        "        st.error(\"Original 'beer-servings.csv' not found. Ensure it's in the same directory.\")\n",
        "        return pd.DataFrame()\n",
        "    except Exception as e:\n",
        "        st.error(f\"Error loading or preprocessing data for infographics: {e}\")\n",
        "        return pd.DataFrame()\n",
        "\n",
        "df = load_data()\n",
        "\n",
        "unique_countries = sorted([c for c in df['country'].unique().tolist() if c != 'Unknown']) if not df.empty else [\"No data\"]\n",
        "unique_continents = sorted([c for c in df['continent'].unique().tolist() if c != 'Unknown']) if not df.empty else [\"No data\"]\n",
        "\n",
        "st.set_page_config(\n",
        "    page_title=\"Beer Servings Predictor\",\n",
        "    layout=\"centered\",\n",
        "    initial_sidebar_state=\"auto\"\n",
        ")\n",
        "\n",
        "st.title(\"🍺 Beer Servings Alcohol Predictor\")\n",
        "st.markdown(\"A web application to predict the total litres of pure alcohol based on serving data and geographical information.\")\n",
        "\n",
        "st.header(\"📊 Data Infographics\")\n",
        "\n",
        "if not df.empty:\n",
        "    st.subheader(\"Total Litres of Pure Alcohol by Continent\")\n",
        "    continent_alcohol = df.groupby('continent')['total_litres_of_pure_alcohol'].sum().reset_index()\n",
        "    fig, ax = plt.subplots(figsize=(10, 6))\n",
        "    sns.barplot(x='continent', y='total_litres_of_pure_alcohol', data=continent_alcohol, ax=ax, palette='viridis')\n",
        "    ax.set_title('Total Litres of Pure Alcohol by Continent', fontsize=16)\n",
        "    ax.set_xlabel('Continent', fontsize=12)\n",
        "    ax.set_ylabel('Total Litres of Pure Alcohol (L)', fontsize=12)\n",
        "    plt.xticks(rotation=45, ha='right')\n",
        "    plt.tight_layout()\n",
        "    st.pyplot(fig)\n",
        "    st.markdown(\"This bar chart displays the aggregated total litres of pure alcohol consumed across different continents. It highlights regions with higher overall consumption.\")\n",
        "\n",
        "    st.subheader(\"Beer Servings vs. Total Litres of Pure Alcohol (by Country)\")\n",
        "    fig2, ax2 = plt.subplots(figsize=(10, 6))\n",
        "    sns.scatterplot(x='beer_servings', y='total_litres_of_pure_alcohol', data=df, ax=ax2, hue='continent', palette='deep', s=100, alpha=0.7)\n",
        "    ax2.set_title('Beer Servings vs. Total Litres of Pure Alcohol', fontsize=16)\n",
        "    ax2.set_xlabel('Beer Servings (ml)', fontsize=12)\n",
        "    ax2.set_ylabel('Total Litres of Pure Alcohol (L)', fontsize=12)\n",
        "    plt.tight_layout()\n",
        "    st.pyplot(fig2)\n",
        "    st.markdown(\"This scatter plot illustrates the relationship between beer servings and total pure alcohol consumption per country, with points colored by continent. It helps visualize potential correlations and clusters.\")\n",
        "else:\n",
        "    st.warning(\"Cannot display infographics: Original dataset not loaded or is empty.\")\n",
        "\n",
        "st.header(\"🔮 Make a Prediction\")\n",
        "st.markdown(\"Enter the serving details and select the country/continent to get a prediction for the total litres of pure alcohol.\")\n",
        "\n",
        "col1, col2, col3 = st.columns(3)\n",
        "with col1:\n",
        "    beer_servings = st.number_input(\"Beer Servings (ml)\", min_value=0, value=100, step=10, help=\"Enter the amount of beer servings in milliliters.\")\n",
        "with col2:\n",
        "    spirit_servings = st.number_input(\"Spirit Servings (ml)\", min_value=0, value=50, step=5, help=\"Enter the amount of spirit servings in milliliters.\")\n",
        "with col3:\n",
        "    wine_servings = st.number_input(\"Wine Servings (ml)\", min_value=0, value=20, step=5, help=\"Enter the amount of wine servings in milliliters.\")\n",
        "\n",
        "selected_country = st.selectbox(\"Country\", options=unique_countries, help=\"Select the country for which to make a prediction.\")\n",
        "selected_continent = st.selectbox(\"Continent\", options=unique_continents, help=\"Select the continent for which to make a prediction.\")\n",
        "\n",
        "if st.button(\"Predict Total Litres of Pure Alcohol\"):\n",
        "    if df.empty:\n",
        "        st.error(\"Cannot make prediction: Original dataset not loaded. Ensure 'beer-servings.csv' is present.\")\n",
        "    else:\n",
        "        try:\n",
        "            input_data = {\n",
        "                'beer_servings': beer_servings,\n",
        "                'spirit_servings': spirit_servings,\n",
        "                'wine_servings': wine_servings\n",
        "            }\n",
        "\n",
        "            for col in feature_columns:\n",
        "                if col.startswith('country_') or col.startswith('continent_'):\n",
        "                    input_data[col] = 0\n",
        "\n",
        "            country_col_name = f'country_{selected_country}'\n",
        "            if country_col_name in feature_columns:\n",
        "                input_data[country_col_name] = 1\n",
        "            else:\n",
        "                st.warning(f\"Warning: Country '{selected_country}' was not a distinct category in the training data. Its specific effect might not be captured.\")\n",
        "\n",
        "            continent_col_name = f'continent_{selected_continent}'\n",
        "            if continent_col_name in feature_columns:\n",
        "                input_data[continent_col_name] = 1\n",
        "            else:\n",
        "                st.warning(f\"Warning: Continent '{selected_continent}' was not a distinct category in the training data. Its specific effect might not be captured.\")\n",
        "\n",
        "            input_df = pd.DataFrame([input_data])\n",
        "            input_df = input_df.reindex(columns=feature_columns, fill_value=0)\n",
        "\n",
        "            prediction = model.predict(input_df)[0]\n",
        "            st.success(f\"**Predicted Total Litres of Pure Alcohol:** {prediction:.2f} L\")\n",
        "\n",
        "        except Exception as e:\n",
        "            st.error(f\"An error occurred during prediction: {e}\")\n",
        "            st.exception(e)\n",
        "\n",
        "st.markdown(\"---\")\n",
        "st.markdown(\"Developed as a Web App Development and Deployment Case Study.\")\n",
        "st.markdown(\"Powered by Streamlit, Scikit-learn, Matplotlib, and Seaborn.\")"
      ],
      "metadata": {
        "id": "L9JUQNVmcodJ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cf48ade6-01a3-4fc7-d680-67495c1a5021"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Overwriting app.py\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import subprocess\n",
        "import threading\n",
        "import time\n",
        "import requests\n",
        "\n",
        "# Define a port for Streamlit to run on\n",
        "streamlit_port = 8501\n",
        "\n",
        "# Function to run Streamlit in a separate thread\n",
        "def run_streamlit_process():\n",
        "    # Use 'nohup' and '&' to run Streamlit in the background and detach from terminal\n",
        "    # We will log Streamlit's output to a file so it doesn't clutter the cell and can be debugged\n",
        "    cmd = f\"nohup streamlit run app.py --server.port {streamlit_port} --server.enableCORS false --server.enableXsrfProtection false > streamlit_app.log 2>&1 &\"\n",
        "    subprocess.run(cmd, shell=True)\n",
        "\n",
        "# Function to wait until the Streamlit server is actually up and running\n",
        "def wait_for_streamlit_ready(port, timeout=60): # Increased timeout to 60 seconds\n",
        "    start_time = time.time()\n",
        "    print(f\"Waiting for Streamlit server to become ready on port {port}...\")\n",
        "    while True:\n",
        "        try:\n",
        "            response = requests.get(f\"http://localhost:{port}/_stcore/health\")\n",
        "            if response.status_code == 200:\n",
        "                print(f\"Streamlit server is ready on port {port}.\")\n",
        "                return True\n",
        "        except requests.exceptions.ConnectionError:\n",
        "            pass\n",
        "        if time.time() - start_time > timeout:\n",
        "            print(f\"Streamlit server did not become ready within {timeout} seconds.\")\n",
        "            return False\n",
        "        time.sleep(1) # Check every 1 second\n",
        "\n",
        "# Start Streamlit in a new thread\n",
        "print(\"Starting Streamlit app in background...\")\n",
        "thread = threading.Thread(target=run_streamlit_process)\n",
        "thread.daemon = True\n",
        "thread.start()\n",
        "print(f\"Streamlit app process initiated on port {streamlit_port}\")\n",
        "\n",
        "# Wait for Streamlit to fully start before attempting to tunnel\n",
        "if not wait_for_streamlit_ready(streamlit_port):\n",
        "    print(\"Streamlit app did not start. Aborting Cloudflare Tunnel setup.\")\n",
        "else:\n",
        "    # Give it a tiny bit more time for good measure after health check\n",
        "    time.sleep(5)\n",
        "\n",
        "    # Open a Cloudflare Tunnel to the Streamlit port\n",
        "    print(\"Opening Cloudflare Tunnel...\")\n",
        "    try:\n",
        "        # Run cloudflared as a subprocess.\n",
        "        # Ensure that cloudflared-linux-amd64 is in /usr/local/bin/ and executable.\n",
        "        # We're now directly watching its output.\n",
        "        cf_process = subprocess.Popen(\n",
        "            f\"/usr/local/bin/cloudflared tunnel --url http://localhost:{streamlit_port}\",\n",
        "            shell=True,\n",
        "            stdout=subprocess.PIPE,\n",
        "            stderr=subprocess.PIPE,\n",
        "            text=True,\n",
        "            bufsize=1 # Line-buffered output\n",
        "        )\n",
        "\n",
        "        public_url = None\n",
        "        start_tunnel_wait_time = time.time()\n",
        "\n",
        "        # Continuously monitor stdout and stderr for the URL, and print ALL output for debugging\n",
        "        print(\"\\n--- Cloudflare Tunnel Output (Live) ---\")\n",
        "        while True:\n",
        "            # Check for output from stderr and stdout\n",
        "            stderr_line = cf_process.stderr.readline()\n",
        "            if stderr_line:\n",
        "                print(f\"[Cloudflared STDERR]: {stderr_line.strip()}\")\n",
        "                if \"https://\" in stderr_line and (\"your random tunnel\" in stderr_line or \"tunnel ID\" in stderr_line):\n",
        "                    # Attempt to extract URL more robustly\n",
        "                    try:\n",
        "                        # Find the first https:// and take the word after it, then strip trailing non-URL chars\n",
        "                        url_match = stderr_line.split(\"https://\")[1]\n",
        "                        public_url = \"https://\" + url_match.split(\" \")[0].strip()\n",
        "                        if not public_url.endswith(\"/\"): # Ensure trailing slash for browser compatibility\n",
        "                            public_url += \"/\"\n",
        "                        print(f\"\\n--- Found Public URL: {public_url} ---\")\n",
        "                        break # Found the URL, exit loop\n",
        "                    except IndexError:\n",
        "                        # Continue if splitting fails, means it wasn't the URL line\n",
        "                        pass\n",
        "\n",
        "\n",
        "            stdout_line = cf_process.stdout.readline()\n",
        "            if stdout_line:\n",
        "                print(f\"[Cloudflared STDOUT]: {stdout_line.strip()}\")\n",
        "                # You might add a check here if URL appears in stdout for some reason\n",
        "\n",
        "            # Check if process exited or if timeout reached\n",
        "            if cf_process.poll() is not None: # Process has terminated\n",
        "                if public_url: # URL was found before termination\n",
        "                    break\n",
        "                else: # Process terminated without finding URL\n",
        "                    print(\"Cloudflare Tunnel process terminated without providing a URL.\")\n",
        "                    break\n",
        "            if time.time() - start_tunnel_wait_time > 120: # Increased timeout to 120 seconds for tunnel establishment\n",
        "                print(\"Cloudflare Tunnel timed out while waiting for URL. It might still be running or failed silently.\")\n",
        "                break\n",
        "\n",
        "            time.sleep(0.5) # Wait a bit before checking again\n",
        "\n",
        "        # Attempt to clean up the cloudflared process if it's still running\n",
        "        if cf_process.poll() is None:\n",
        "            print(\"Terminating Cloudflare Tunnel process...\")\n",
        "            cf_process.terminate()\n",
        "            time.sleep(1) # Give it a moment to terminate\n",
        "            if cf_process.poll() is None:\n",
        "                cf_process.kill()\n",
        "            print(\"Cloudflare Tunnel process terminated.\")\n",
        "\n",
        "\n",
        "        if public_url:\n",
        "            print(f\"\\nYour Streamlit app is publicly accessible at: {public_url}\")\n",
        "            print(\"\\nClick the link above to open your app!\")\n",
        "            print(\"This URL should NOT require a password and can be shared.\")\n",
        "            print(\"If the app doesn't load immediately, please wait a few seconds and refresh the page.\")\n",
        "        else:\n",
        "            print(\"\\nFailed to get Cloudflare Tunnel URL after extensive monitoring.\")\n",
        "            print(\"This usually means cloudflared encountered an issue or its output format changed significantly.\")\n",
        "            print(\"Check the full [Cloudflared STDERR] and [Cloudflared STDOUT] above for clues.\")\n",
        "\n",
        "    except Exception as e:\n",
        "        print(f\"\\nAn unexpected Python error occurred while setting up Cloudflare Tunnel: {e}\")\n",
        "        import traceback\n",
        "        traceback.print_exc() # Print full traceback for more details\n",
        "        print(\"Please ensure `cloudflared` executable is in /usr/local/bin/ and has execute permissions.\")\n",
        "        print(\"You can try reinstalling: `!wget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64` and `!chmod +x cloudflared-linux-amd64` and `!mv cloudflared-linux-amd64 /usr/local/bin/cloudflared`\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qmUK0K6XcyDZ",
        "outputId": "9751d699-91c9-4ffc-df7b-20882b827464"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Starting Streamlit app in background...\n",
            "Streamlit app process initiated on port 8501\n",
            "Waiting for Streamlit server to become ready on port 8501...\n",
            "Streamlit server is ready on port 8501.\n",
            "Opening Cloudflare Tunnel...\n",
            "\n",
            "--- Cloudflare Tunnel Output (Live) ---\n",
            "[Cloudflared STDERR]: 2025-06-24T15:16:36Z INF Thank you for trying Cloudflare Tunnel. Doing so, without a Cloudflare account, is a quick way to experiment and try it out. However, be aware that these account-less Tunnels have no uptime guarantee, are subject to the Cloudflare Online Services Terms of Use (https://www.cloudflare.com/website-terms/), and Cloudflare reserves the right to investigate your use of Tunnels for violations of such terms. If you intend to use Tunnels in production you should use a pre-created named tunnel by following: https://developers.cloudflare.com/cloudflare-one/connections/connect-apps\n"
          ]
        }
      ]
    }
  ]
}